[{"/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/index.js":"1","/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/reportWebVitals.js":"2","/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/App.js":"3","/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/scripts/camera_imu.ts":"4"},{"size":500,"mtime":1607743466686,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1607742697320,"results":"7","hashOfConfig":"6"},{"size":1854,"mtime":1607994398440,"results":"8","hashOfConfig":"6"},{"size":4684,"mtime":1607994824066,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"14frbsb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"19"},"/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/index.js",[],["20","21"],"/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/reportWebVitals.js",[],"/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/App.js",[],"/Users/raghava13/Documents/Robotics/ros-phone-sensors-app/src/scripts/camera_imu.ts",["22"],"import ROSLIB from \"roslib\";\nimport * as THREE from \"three\";\n\nclass CameraIMU {\n  ros: ROSLIB.Ros;\n  alpha: number | null;\n  valpha: number | null;\n  z: number | null;\n  beta: number | null;\n  vbeta: number | null;\n  x: number | null;\n  gamma: number | null;\n  vgamma: number | null;\n  y: number | null;\n  image_topic: ROSLIB.Topic;\n  imu_topic: ROSLIB.Topic;\n\n  constructor(ros_master_ip: string) {\n    ros_master_ip = \"ws://\" + ros_master_ip + \":9090\"\n    // INITIALIZATION\n    this.ros = new ROSLIB.Ros({\n      url: ros_master_ip\n    });\n\n    this.ros.on('connection', function () { console.log('Connected to websocket server.'); });\n\n    this.ros.on('error', function (error) { console.log('Error connecting to websocket server: ', error); window.alert('Error connecting to websocket server'); });\n\n    this.ros.on('close', function () { console.log('Connection to websocket server closed.'); });\n\n    this.alpha = null;\n    this.valpha = null;\n    this.z = null;\n    this.beta = null;\n    this.vbeta = null;\n    this.x = null;\n    this.gamma = null;\n    this.vgamma = null;\n    this.y = null;\n\n    this.image_topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: \"/camera/image/compressed\",\n      messageType: \"sensor_msgs/CompressedImage\",\n    });\n\n    this.imu_topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: \"/gyro\",\n      messageType: \"sensor_msgs/Imu\",\n    });\n    \n    this.initialize_event_handlers();\n  }\n\n  initialize_event_handlers() {\n    // setup event handler to capture the orientation event and store the most recent data in a variable\n\n    if (window.DeviceOrientationEvent) {\n      // Listen for the deviceorientation event and handle the raw data\n      window.addEventListener('deviceorientation', (eventData) => {\n        // gamma is the left-to-right tilt in degrees, where right is positive\n        this.gamma = eventData.gamma;\n\n        // beta is the front-to-back tilt in degrees, where front is positive\n        this.beta = eventData.beta;\n\n        // alpha is the compass direction the device is facing in degrees\n        this.alpha = eventData.alpha\n\n      }, false);\n    };\n\n    // setup event handler to capture the acceleration event and store the most recent data in a variable\n\n    if (window.DeviceMotionEvent) {\n      window.addEventListener('devicemotion', (eventData: DeviceMotionEvent) => {\n        // Grab the acceleration from the results\n        var acceleration = eventData.acceleration;\n        this.x = acceleration!.x;\n        this.y = acceleration!.y;\n        this.z = acceleration!.z;\n\n        // Grab the rotation rate from the results\n        var rotation = eventData.rotationRate;\n        this.valpha = rotation!.alpha;\n        this.vgamma = rotation!.gamma;\n        this.vbeta = rotation!.beta;\n      }, false);\n    } else {\n      window.alert(\"acceleration measurements Not supported.\");\n    }\n  }\n  // function that is run by trigger several times a second\n  // takes snapshot of video to canvas, encodes the images as base 64 and sends it to the ROS topic\n  imageSnapshot(getImageCb: () => string) {\n    var imageMessage = new ROSLIB.Message({\n      format: \"jpeg\",\n      data: getImageCb().replace(\"data:image/jpeg;base64,\", \"\")\n    });\n\n    this.image_topic.publish(imageMessage);\n  }\n\n  imuSnapshot() {\n    var beta_radian = ((this.beta! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var gamma_radian = ((this.gamma! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var alpha_radian = ((this.alpha! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var eurlerpose = new THREE.Euler(beta_radian, gamma_radian, alpha_radian);\n    var quaternionpose = new THREE.Quaternion;\n    quaternionpose.setFromEuler(eurlerpose);\n\n    var imuMessage = new ROSLIB.Message({\n      header: {\n        frame_id: \"world\"\n      },\n      orientation: {\n        x: quaternionpose.x,\n        y: quaternionpose.y,\n        z: quaternionpose.z,\n        w: quaternionpose.w\n      },\n      orientation_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      angular_velocity: {\n        x: this.vbeta,\n        y: this.vgamma,\n        z: this.valpha,\n      },\n      angular_velocity_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      linear_acceleration: {\n        x: this.x,\n        y: this.y,\n        z: this.z,\n      },\n      linear_acceleration_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    });\n\n    this.imu_topic.publish(imuMessage);\n  }\n\n  start(getImageCb: () => string) {\n    setInterval(() => {\n      this.imageSnapshot(getImageCb);\n    }, 250);       // publish an image 4 times per second\n    setInterval(() => {\n      this.imuSnapshot();\n    }, 100);       // publish an IMU message 10 times per second\n  }\n}\n\nexport default CameraIMU;",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":110,"column":26,"nodeType":"29","messageId":"30","endLine":110,"endColumn":46,"fix":"31"},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"34","text":"35"},"no-global-assign","no-unsafe-negation",[3650,3650],"()"]