{"version":3,"sources":["scripts/camera_imu.ts","App.js","reportWebVitals.js","index.js"],"names":["CameraIMU","ros_master_ip","ros","alpha","valpha","z","beta","vbeta","x","gamma","vgamma","y","image_topic","imu_topic","this","ROSLIB","Ros","url","on","console","log","error","window","alert","Topic","name","messageType","initialize_event_handlers","DeviceOrientationEvent","addEventListener","eventData","DeviceMotionEvent","acceleration","rotation","rotationRate","getImageCb","imageMessage","Message","format","data","replace","publish","beta_radian","Math","PI","gamma_radian","alpha_radian","eurlerpose","THREE","quaternionpose","setFromEuler","imuMessage","header","frame_id","orientation","w","orientation_covariance","angular_velocity","angular_velocity_covariance","linear_acceleration","linear_acceleration_covariance","setInterval","imageSnapshot","imuSnapshot","App","useState","localStorage","getItem","rosMasterIp","setRosMasterIp","frontFacing","setFrontFacing","width","screen","height","outputDims","videoConstraints","facingMode","exact","webcamRef","useRef","current","getScreenshot","style","padding","onChange","event","setItem","target","value","onClick","start","type","audio","ref","screenshotFormat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2429f2d1.chunk.js","sourcesContent":["import ROSLIB from \"roslib\";\nimport * as THREE from \"three\";\n\nclass CameraIMU {\n  ros: ROSLIB.Ros;\n  alpha: number | null;\n  valpha: number | null;\n  z: number | null;\n  beta: number | null;\n  vbeta: number | null;\n  x: number | null;\n  gamma: number | null;\n  vgamma: number | null;\n  y: number | null;\n  image_topic: ROSLIB.Topic;\n  imu_topic: ROSLIB.Topic;\n\n  constructor(ros_master_ip: string) {\n    ros_master_ip = \"ws://\" + ros_master_ip + \":9090\"\n    // INITIALIZATION\n    this.ros = new ROSLIB.Ros({\n      url: ros_master_ip\n    });\n\n    this.ros.on('connection', function () { console.log('Connected to websocket server.'); });\n\n    this.ros.on('error', function (error) { console.log('Error connecting to websocket server: ', error); window.alert('Error connecting to websocket server'); });\n\n    this.ros.on('close', function () { console.log('Connection to websocket server closed.'); });\n\n    this.alpha = null;\n    this.valpha = null;\n    this.z = null;\n    this.beta = null;\n    this.vbeta = null;\n    this.x = null;\n    this.gamma = null;\n    this.vgamma = null;\n    this.y = null;\n\n    this.image_topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: \"/camera/image/compressed\",\n      messageType: \"sensor_msgs/CompressedImage\",\n    });\n\n    this.imu_topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: \"/gyro\",\n      messageType: \"sensor_msgs/Imu\",\n    });\n    \n    this.initialize_event_handlers();\n  }\n\n  initialize_event_handlers() {\n    // setup event handler to capture the orientation event and store the most recent data in a variable\n\n    if (window.DeviceOrientationEvent) {\n      // Listen for the deviceorientation event and handle the raw data\n      window.addEventListener('deviceorientation', (eventData) => {\n        // gamma is the left-to-right tilt in degrees, where right is positive\n        this.gamma = eventData.gamma;\n\n        // beta is the front-to-back tilt in degrees, where front is positive\n        this.beta = eventData.beta;\n\n        // alpha is the compass direction the device is facing in degrees\n        this.alpha = eventData.alpha\n\n      }, false);\n    };\n\n    // setup event handler to capture the acceleration event and store the most recent data in a variable\n\n    if (window.DeviceMotionEvent) {\n      window.addEventListener('devicemotion', (eventData: DeviceMotionEvent) => {\n        // Grab the acceleration from the results\n        var acceleration = eventData.acceleration;\n        this.x = acceleration!.x;\n        this.y = acceleration!.y;\n        this.z = acceleration!.z;\n\n        // Grab the rotation rate from the results\n        var rotation = eventData.rotationRate;\n        this.valpha = rotation!.alpha;\n        this.vgamma = rotation!.gamma;\n        this.vbeta = rotation!.beta;\n      }, false);\n    } else {\n      window.alert(\"acceleration measurements Not supported.\");\n    }\n  }\n  // function that is run by trigger several times a second\n  // takes snapshot of video to canvas, encodes the images as base 64 and sends it to the ROS topic\n  imageSnapshot(getImageCb: () => string) {\n    var imageMessage = new ROSLIB.Message({\n      format: \"jpeg\",\n      data: getImageCb().replace(\"data:image/jpeg;base64,\", \"\")\n    });\n\n    this.image_topic.publish(imageMessage);\n  }\n\n  imuSnapshot() {\n    var beta_radian = ((this.beta! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var gamma_radian = ((this.gamma! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var alpha_radian = ((this.alpha! + 360) / 360 * 2 * Math.PI) % (2 * Math.PI);\n    var eurlerpose = new THREE.Euler(beta_radian, gamma_radian, alpha_radian);\n    var quaternionpose = new THREE.Quaternion;\n    quaternionpose.setFromEuler(eurlerpose);\n\n    var imuMessage = new ROSLIB.Message({\n      header: {\n        frame_id: \"world\"\n      },\n      orientation: {\n        x: quaternionpose.x,\n        y: quaternionpose.y,\n        z: quaternionpose.z,\n        w: quaternionpose.w\n      },\n      orientation_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      angular_velocity: {\n        x: this.vbeta,\n        y: this.vgamma,\n        z: this.valpha,\n      },\n      angular_velocity_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      linear_acceleration: {\n        x: this.x,\n        y: this.y,\n        z: this.z,\n      },\n      linear_acceleration_covariance: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    });\n\n    this.imu_topic.publish(imuMessage);\n  }\n\n  start(getImageCb: () => string) {\n    setInterval(() => {\n      this.imageSnapshot(getImageCb);\n    }, 250);       // publish an image 4 times per second\n    setInterval(() => {\n      this.imuSnapshot();\n    }, 100);       // publish an IMU message 10 times per second\n  }\n}\n\nexport default CameraIMU;","import { useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport CameraIMU from \"./scripts/camera_imu.ts\";\n\nfunction App() {\n  const [rosMasterIp, setRosMasterIp] = useState(\n    localStorage.getItem(\"rosMasterIp\") | \"\"\n  );\n  const [frontFacing, setFrontFacing] = useState(\n    localStorage.getItem(\"frontFacing\") | true\n  );\n\n  var camera_imu;\n  const padding = 10;\n  const width = window.screen.width - 2 * padding;\n  const height = window.screen.height * 0.65;\n  const outputDims = { width: 1920, height: 1080 };\n\n  var videoConstraints = {\n    width: width,\n    height: height,\n    facingMode: frontFacing ? \"user\" : { exact: \"environment\" },\n  };\n\n  const onRosIpChange = (event) => {\n    localStorage.setItem(\"rosMasterIp\", event.target.value);\n    setRosMasterIp(event.target.value);\n  };\n\n  const onCameraDirChange = () => {\n    localStorage.setItem(\"frontFacing\", !frontFacing);\n    setFrontFacing(!frontFacing);\n  };\n\n  const webcamRef = useRef(null);\n\n  const getImageCb = () => {\n    if (webcamRef) {\n      return webcamRef.current.getScreenshot(outputDims);\n    }\n  };\n\n  const initCameraIMU = () => {\n    camera_imu = new CameraIMU(rosMasterIp);\n    camera_imu.start(getImageCb);\n  };\n\n  return (\n    <div style={{ padding: `${padding}px` }}>\n      <label>ROS Master IP Address:</label>\n      <input onChange={onRosIpChange} />\n      <br />\n      <br />\n      <button onClick={() => initCameraIMU()}>Initialize</button>\n      <br />\n      <br />\n      <label>Front Facing Camera? </label>\n      <input onChange={onCameraDirChange} type=\"checkbox\" />\n      <div>\n        \n      </div>\n      <Webcam\n        audio={false}\n        height={height}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        width={width}\n        videoConstraints={videoConstraints}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}